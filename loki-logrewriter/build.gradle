/*
 * This file was generated by the Gradle 'init' task.
 */

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE")
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'

dependencies {
}

bootJar {
    baseName = 'logrewriter'
    version = '0.0.1'
}

task writeVersionInformation() {
    doLast {
        String branch = getCurrentGitBranch()
        String time = new Date().toGMTString()
        def configFile = new File(getRootProject().getProjectDir(), 'loki-logrewriter/src/main/resources/version.txt')
        configFile.write(String.format("module=logrewriter,branch=%s,buildTime=%s", branch, time), "UTF-8")
    }
}
task copyToDockerDir(type: Copy) {
	from file("build/libs/")
	into getRootProject().getProjectDir().getAbsolutePath() + "/docker/logrewriter"
}

task build(overwrite: true) {
    dependsOn = ['clean', 'writeVersionInformation', 'test', 'bootJar', 'copyToDockerDir']
    writeVersionInformation.mustRunAfter clean
    test.mustRunAfter writeVersionInformation
    bootJar.mustRunAfter test
    copyToDockerDir.mustRunAfter(bootJar)
}


def getCurrentGitBranch() {
    def gitBranch = "Unknown branch"
    def gitCommit = "N/A"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
        def cmd = 'git log --pretty=format:%h -1'
        gitCommit = cmd.execute(null, workingDir).text.trim()
    } catch (e) {
    }
    return gitBranch + "@" + gitCommit
}


def getGitCommit() {
    def gitDir = new File("${new File("${rootDir}").getParent()}/.git")
    if (!gitDir.isDirectory()) {
        return 'non-git-build'
    }

    def cmd = 'git log --pretty=format:%h -1'
    def gitCommit = cmd.execute().text.trim()
    assert !gitCommit.isEmpty()
    gitCommit
}

description = 'logrewriter'
